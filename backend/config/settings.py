"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

BASE_DIR = Path(__file__).resolve().parent.parent

# ---- Sélection de l'environnement et chargement des .env en local ----
DJANGO_ENV = os.getenv("DJANGO_ENV", "development")  # "development" | "production"

# En local, charge .env.local ; en prod, on préfère les variables d'env de l'hébergeur
if DJANGO_ENV == "development":
    load_dotenv(BASE_DIR / ".env.local")
else:
    # Si je veux vraiment un fichier côté serveur (non recommandé), décommenter :
    # load_dotenv(BASE_DIR / ".env.prod")
    pass

DEBUG = os.getenv("DEBUG", "1" if DJANGO_ENV == "development" else "0") == "1"


def _split_csv(key, default=""):
    val = os.getenv(key, default)
    return [x.strip() for x in val.split(",") if x.strip()]


# ---- Base ----
SECRET_KEY = os.getenv("SECRET_KEY", "unsafe-default-change-me")

# DEBUG piloté par env (dev=1, prod=0)
DEBUG = os.getenv("DEBUG", "1" if DJANGO_ENV == "development" else "0") == "1"

ALLOWED_HOSTS = _split_csv("ALLOWED_HOSTS", "localhost,127.0.0.1")


# Application definition

INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 3rd-party
    "rest_framework",
    "corsheaders",
    # local
    "stays",  # si pas encore créée, lancer: python manage.py startapp stays
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = "fr-fr"

# TIME_ZONE = 'UTC'
TIME_ZONE = "Europe/Paris"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

# --- CORS / CSRF ---
CORS_ALLOWED_ORIGINS = _split_csv(
    "CORS_ALLOWED_ORIGINS", "http://localhost:5173,http://127.0.0.1:5173"
)
CORS_ALLOW_CREDENTIALS = True

# ⚠️ mettre les origines DU FRONT (5173) ici
CSRF_TRUSTED_ORIGINS = _split_csv(
    "CSRF_TRUSTED_ORIGINS", "http://localhost:5173,http://127.0.0.1:5173"
)

REST_FRAMEWORK = {
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ],
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "60/min",  # ajuster selon le trafic
        "user": "120/min",
    },
}


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Cookies + HTTPS / Headers sécurité
# Si je suis derrière un proxy/CDN (Vercel, Render, Nginx...)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_SSL_REDIRECT = True

    # HSTS — commencer bas puis augmenter quand tout est OK
    SECURE_HSTS_SECONDS = int(os.getenv("SECURE_HSTS_SECONDS", "300"))  # 300 au début
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = False  # passer à True plus tard, avec max-age >= 31536000

    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"
    X_FRAME_OPTIONS = "DENY"
else:
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 0

# --- Logging minimal ---
LOG_LEVEL = "DEBUG" if DEBUG else os.getenv("LOG_LEVEL", "INFO")
DB_LOG_LEVEL = os.getenv("DB_LOG_LEVEL", "WARNING")  # passe à INFO pour debug SQL

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "basic": {
            "format": "%(asctime)s %(levelname)s [%(name)s] %(message)s",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "basic",
        },
    },
    # logger racine : toutes mes applis
    "root": {
        "handlers": ["console"],
        "level": LOG_LEVEL,
    },
    # loggers Django utiles
    "loggers": {
        # erreurs côté requêtes (500, etc.)
        "django.request": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
        # serveur runserver / gunicorn worker
        "django.server": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        # SQL (gardé haut en prod)
        "django.db.backends": {
            "handlers": ["console"],
            "level": DB_LOG_LEVEL,
            "propagate": False,
        },
    },
}
